img.pull-right(src=image
               alt="Credits: https://br.pinterest.com/pin/613052567996605764/"
               width=200 height=127)

p.mg-first It’s very common the analogy between software “factory” and the
  |  civil sector: buildings are made brick by brick, a patient and
  |  homœopathic work to build a huge and solid structure, while software
  |  are made code by code, a patient work too.

p Nothing could be futher from reality.

p Still inexact, but closer to the real thing, it’s the analogy with a
  |  transport vehicle (#[strong not its factory!]).

p A software is like a tractor: when the tires are bald, you change them.
  |  If the engine is broken, you fix it, otherwise you change it. When the
  |  tractor is obsolete, you change the whole thing.

p So are the software.

p When some parts are malfunctioning, you change them. If its core is broken,
  |  you fix it, otherwise you change it. When the software is overpast,
  |  you change the whole thing.

p Mind that the #[strong code] is to the #[strong software] as the
  |  #[strong tractor hardware] is to its #[strong feature]. Change the code
  |  isn’t change the software.

p More precisely, the software is a live thing, that grows, evolves, and
  |  eventually dies. It’s #[strong information], not a hard brick.
