img.pull-right(src=image alt="German Shepherd dog")

p.mg-first The other day, talking to some coworkers, I realised developers
  |  unacquainted to #[=""]
  a(href="https://www.freecodecamp.org/news/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84/")
    | functional programming
  |  find hard to understand type covariance and contravariance abstractions.

p So I thought about an analogy to make it easier.

h3 Type contravariance

p Let’s define two classes that represent something easy to get in mind: dogs.
  |  Shepherds are dogs, so (in #[=""]
  a(href="https://www.scala-lang.org/") Scala
  | ):

pre.prettyprint: code.scala.
  class Dog

  class Shepherd extends Dog

p We have a job for a dog trainer. Think about a Shepherd pack needing to be
  |  trained.

p The job title is “Shepherd trainer”, but a dog trainer – someone who know how
  |  to train every kind of dog – is competent for the job:

pre.prettyprint: code.scala.
  class Trainer[-A]

  val trainerJob: Trainer[Shepher] = new Trainer[Dog]

p That’s okay! But a Shepherd trainer couldn’t take a general dog trainer job,
  |  ’cause he has no experience with training other kinds of dog.

p This is #[strong contravariance]:

pre.prettyprint: code.scala.
  // If:
  implicitly[Shepherd &lt;:&lt; Dog]
  // Then:
  implicitly[Trainer[Dog] &lt;:&lt; Trainer[Shepherd]]

p (
  small #[code &lt;:&lt;] means “is subclass of,” or: every #[code Shepherd] is
    |  a #[code Dog] too, so every #[code Trainer&#91;Dog&#93;] is a
    |  #[code Trainer&#91;Shepherd&#93;] too.
  | )

p In Scala we use #[code -] to represent contravariance.

h3 Type covariance

p Now imagine that we need to hire a dog producer. We’re not interested in
  |  what kind of dog he’ll supply, any kind is great.

p So a Shepherd producer could apply for the service, ’cause Shepherd dogs
  |  are so good as any other.

pre.prettyprint: code.
  class Producer[+A]

  val producerContract: Producer[Dog] = new Producer[Shepherd]

p It’s called #[strong covariance]:

pre.prettyprint: code.
  // If
  implicitly[Shepherd &lt;:&lt; Dog]
  // Then
  implicitly[Producer[Shepherd] &lt;:&lt; Producer[Dog]]

p (
  small Every #[code Producer&#91;Shepherd&#93;] is a
    |  #[code Producer&#91;Dog&#93;] too – he produces only dogs.
  | )

p In Scala we use #[code +] to represent covariance.
