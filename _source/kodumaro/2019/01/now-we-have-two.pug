img.pull-right(src=image alt="Ruby")

p.mg-first We had some problems to solve. The technical management decided we
  |  should use #[=""]
  a(href="https://www.ruby-lang.org/") Ruby
  | . Now we have bigger ones. Let’s go into it…

p Ruby is known as the #[em silver bullet] for every issue: a strongly and
  |  dynamically typed language, deeply object-oriented (everything is an
  |  object), general purpose, implicit resources management approach,
  |  metaprogramming, schemaless modelling, easy deployment, lots of
  |  ready-to-use tools, cool native resources like symbols, hashes (“hash maps”
  |  for javists, “dictionaries” for everyone else), and nested modules (like
  |  namespaces), developers around every corner. Above all, #[=""]
  a(href="https://rubyonrails.org/") Ruby On Rails
  | .

p It has a self-centered community that believes anything can be solved by Ruby
  |  better than by any other – if you think about it, not much different
  |  from #[=""]
  a(href="https://www.java.com/") Java
  | , #[=""]
  a(href="http://www.php.net/") PHP
  | , or #[=""]
  a(href="https://www.python.org/") Python
  |  communities.

p ’Til here everything sounds good, but that’s because we’re only looking at the
  |  propaganda, not the real world.

h3 Metaprogramming everywhere

p The first #[em cool feature], that’s not so cool up close, is the unblessed
  |  metaprogramming. It’s the most non-straight approach you can find and, like
  |  any other indirection, everything becomes cloudy.

p Typically you do not write the code: you write a code that writes the target
  |  one implicitly. So you never quite see the final code, that one which
  |  indeed runs.

p This is the debuggers’ hell. Just try to find a logical bug’s origin, an
  |  inconsistency, in a code that doesn’t really exist.

p It leads us to the next trouble: monkey patching.

h3 Monkey patching

p Because of metaprogramming approach, Ruby simply loves monkey patching.
  |  Every #[=""]
  a(href="https://rubygems.org/") gem
  | , every library injects codes into your code.

p So new unexpected methods and classes just fall from another dimension. Your
  |  own coded resources can be rewritten by some other anytime. Looking at the
  |  code, you can’t find what it does, you must know all resources you’re using
  |  by heart. The documentation becomes more relevant than the code you write –
  |  and #[=""]
  a(href="https://www.azquotes.com/quote/878654") the doc (almost) always lies
  | .

p Therefore, the best Ruby developers are those who memorise the main resources
  |  of each gem, not the one who understands programming and logic.

h3 Self-centeredness

p Like mainly the Java and PHP communities – and after both – the Ruby community
  |  is self-centered. All kinds of falsehoods about other programming languages
  |  and patterns are spread.

p “Ruby is the best solution for #[em X]” (where #[em X] #[strong is actually]
  |  anything), “no other language can do what Ruby does,” “metaprogramming is
  |  the best practice,” and some suspicious design patterns like implicitness
  |  and the above-mentioned monkey patching.

p After self-centeredness, arise weak and dumb integrations.

h3 JRuby

p You can think “what great idea running Ruby on the JVM!” But the reality is
  |  poorer.

p
  a(href="https://www.jruby.org/") JRuby
  |  comes to solve a very specific issue: running Ruby On Rails applications on
  |  the JVM, and it alone. So all JRuby does is enable the JVM to perform Ruby
  |  (On Rails) codes.

p It supplies only a way to run and/or compile executable Ruby scripts. You
  |  simply #[strong cannot] compile a Ruby library to bytecode and access it on
  |  a Java (or other language over the JVM) context.

p
  a(href="http://www.jython.org/") Jython
  | , #[=""]
  a(href="https://www.scala-lang.org/") Scala
  | , #[=""]
  a(href="https://kotlinlang.org/") Kotlin
  | , #[=""]
  a(href="http://groovy-lang.org/") Groovy
  |  – virtually every language over the JVM supports foreign integration to any
  |  other, but JRuby.

p Just like Ruby itself, JRuby promotes the platform shutting, afraid of
  |  developers’ escape.

hr/

p And it makes a lot of sense: if a bright programmer actually gets in touch to
  |  another development platform, in deep touch, he or she can see how far
  |  behind Ruby is, and then he or she will be lost. Finally only the less
  |  perceptive programmers will remain, defending the indefensible. They better
  |  keep people unaware.

+medium-link
